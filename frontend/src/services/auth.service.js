import axios from 'axios';

const API_URL = 'http://localhost:8080/api/auth/';

class AuthService {
    async login(username, password) {
        try {
            const response = await axios.post(API_URL + 'signin', {
                username,
                password
            });

            // Handle JWT response
            if (response.data && response.data.token) {
                localStorage.setItem('user', JSON.stringify(response.data));
            }
            return response.data;
        } catch (error) {
            console.error("Login error:", error);
            throw error;
        }
    }

    logout() {
        console.log("ðŸ”‘ Executing FORCED logout from AuthService");
        try {
            // XÃ³a toÃ n bá»™ localStorage
            localStorage.clear();
            console.log("ðŸ”‘ All localStorage cleared");
            
            // Double-check xÃ³a user
            localStorage.removeItem('user');
            console.log("ðŸ”‘ User specifically removed");
            
            // XÃ³a toÃ n bá»™ sessionStorage
            sessionStorage.clear();
            console.log("ðŸ”‘ All sessionStorage cleared");
            
            // XÃ³a cookies
            document.cookie.split(";").forEach(function(c) {
                document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
            });
            console.log("ðŸ”‘ All cookies cleared");
            
            // KÃ­ch hoáº¡t sá»± kiá»‡n Ä‘á»ƒ cÃ¡c component khÃ¡c biáº¿t
            try {
                window.dispatchEvent(new Event('storage'));
                window.dispatchEvent(new Event('logout'));
                console.log("ðŸ”‘ Storage and logout events dispatched");
            } catch (e) {
                console.error("ðŸ”‘ Error dispatching events:", e);
            }
            
            // Kiá»ƒm tra láº¡i
            const stillLoggedIn = localStorage.getItem('user');
            console.log("ðŸ”‘ Still logged in?", !!stillLoggedIn);
            if (stillLoggedIn) {
                console.warn("ðŸ”‘ WARNING: Still logged in after logout attempt!");
                // Thá»­ xÃ³a láº¡i
                localStorage.removeItem('user');
                localStorage.clear();
            }
            
            // LÃ m má»›i trang
            console.log("ðŸ”‘ Will reload page in 50ms");
            setTimeout(() => {
                window.location.reload(true);
            }, 50);
            
            return true;
        } catch (error) {
            console.error("ðŸ”‘ Critical error during logout:", error);
            // PhÆ°Æ¡ng Ã¡n cuá»‘i cÃ¹ng
            localStorage.clear();
            sessionStorage.clear();
            setTimeout(() => window.location.reload(true), 100);
            return false;
        }
    }

    async register(username, email, password) {
        try {
            const response = await axios.post(API_URL + 'signup', {
                username,
                email,
                password
                // No role field - backend will assign default role
            });
            return response.data;
        } catch (error) {
            console.error("Registration error:", error);
            throw error;
        }
    }

    getCurrentUser() {
        return JSON.parse(localStorage.getItem('user'));
    }

    isLoggedIn() {
        const user = this.getCurrentUser();
        return !!user;
    }
}

export default new AuthService(); 